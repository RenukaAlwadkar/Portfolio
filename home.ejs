<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Rishi- Portfolio</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/ScrollTrigger.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }
    
    body {
      background-color: #fafafa;
      color: #222;
      overflow-x: hidden;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    /* Header */
    header {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      padding: 20px 0;
      z-index: 1000;
      transition: all 0.3s ease;
      background-color: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      box-shadow: 0 5px 25px rgba(0, 0, 0, 0.05);
    }
    
    .header-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .logo {
      display: flex;
      align-items: center;
      font-weight: 700;
      font-size: 24px;
      color: #222;
      text-decoration: none;
    }
    
    .logo span {
      color: #FF7A3D;
      margin-right: 5px;
    }
    
    .logo-circle {
      width: 36px;
      height: 36px;
      background-color: #FF7A3D;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 10px;
      color: white;
      font-weight: 600;
    }
    
    nav ul {
      display: flex;
      list-style: none;
      gap: 40px;
    }

    .nav-links{
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    nav ul li a {
      text-decoration: none;
      color: #222;
      font-weight: 500;
      transition: all 0.3s ease;
      position: relative;
    }
    
    nav ul li a:hover {
      color: #FF7A3D;
    }
    
    nav ul li a::after {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 0;
      width: 0;
      height: 2px;
      background-color: #FF7A3D;
      transition: width 0.3s ease;
    }
    
    nav ul li a:hover::after {
      width: 100%;
    }
    
    .active {
      color: #FF7A3D;
    }
    
    /* Hero */
    .hero {
      height: 100vh;
      display: flex;
      align-items: center;
      position: relative;
      overflow: hidden;
      margin-top: 20px;
    }
    
    .hero-content {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: relative;
      z-index: 5;
    }
    
    .hero-text {
      max-width: 700px;
    }
    
    .hello-badge {
      display: inline-block;
      padding: 8px 16px;
      background-color: rgba(255, 122, 61, 0.1);
      color: #FF7A3D;
      border-radius: 30px;
      font-weight: 500;
      margin-bottom: 25px;
      position: relative;
      opacity: 0;
      transform: translateY(20px);
    }
    
    .hello-badge::after {
      content: 'âœ¨';
      position: absolute;
      right: -20px;
      top: -10px;
    }
    
    .hero-title {
      font-size: 4rem;
      font-weight: 700;
      margin-bottom: 10px;
      line-height: 1.1;
      opacity: 0;
      transform: translateY(20px);
    }
    
    .hero-title .highlight {
      color: #FF7A3D;
      position: relative;
    }
    
    .hero-title .highlight::before {
      content: '';
      position: absolute;
      width: 80px;
      height: 80px;
      border: 2px solid #FF7A3D;
      border-radius: 50%;
      top: -30px;
      left: -30px;
      opacity: 0.3;
      z-index: -1;
    }
    
    .hero-desc {
      font-size: 1.1rem;
      color: #666;
      margin-bottom: 30px;
      opacity: 0;
      transform: translateY(20px);
    }
    
    .hero-image {
      position: relative;
      opacity: 1;
      z-index: 10;
    }
    
    .hero-image img {
      width: 380px;
      height: auto;
      border-radius: 50%;
      object-fit: cover;
    }
    
    .image-circle {
      position: absolute;
      width: 450px;
      height: 450px;
      background-color: rgba(255, 122, 61, 0.15);
      border-radius: 50%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: -1;
    }
    
    .stats {
      display: flex;
      gap: 40px;
      margin-top: 50px;
      opacity: 0;
      transform: translateY(20px);
    }
    
    .stat-item {
      display: flex;
      flex-direction: column;
    }
    
    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 5px;
      color: #222;
    }
    
    .stat-text {
      color: #666;
      font-size: 0.9rem;
    }
    
    .rating {
      color: #FF7A3D;
      font-size: 1.2rem;
      margin-bottom: 10px;
    }
    
    .quote {
      position: absolute;
      left: 0;
      max-width: 280px;
      padding: 20px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      opacity: 0;
      transform: translateX(-20px);
    }
    
    .quote::before {
      content: '"';
      font-size: 3rem;
      color: rgba(255, 122, 61, 0.2);
      position: absolute;
      top: -10px;
      left: 10px;
    }
    
    .quote p {
      font-size: 0.9rem;
      line-height: 1.6;
      margin-bottom: 10px;
    }
    
    .quote-author {
      font-weight: 600;
      font-size: 0.8rem;
    }
    
    .cta-buttons {
      display: flex;
      gap: 20px;
      margin-top: 40px;
      opacity: 0;
      transform: translateY(20px);
    }
    
    .btn {
      padding: 12px 24px;
      border-radius: 30px;
      font-weight: 500;
      transition: all 0.3s ease;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .btn2 {
      padding: 8px 20px;
      margin: 0;
      border-radius: 25px;
      font-weight: 500;
      transition: all 0.3s ease;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-primary {
      background-color: #FF7A3D;
      color: white;
      border: none;
    }
    
    .btn-primary:hover {
      background-color: #e86a2d;
      transform: translateY(-3px);
      box-shadow: 0 10px 20px rgba(255, 122, 61, 0.3);
    }
    
    .btn-secondary {
      background-color: transparent;
      color: #222;
      border: 1px solid #ddd;
    }
    
    .btn-secondary:hover {
      border-color: #FF7A3D;
      color: #FF7A3D;
      transform: translateY(-3px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
    }
    
    /* 3D elements container */
    .scene-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
    
    /* Floating elements */
    .floating-shape {
      position: absolute;
      z-index: 1;
      opacity: 0.6;
      filter: blur(1px);
    }
    
    .shape1 {
      top: 15%;
      left: 10%;
      width: 40px;
      height: 40px;
      background-color: rgba(255, 122, 61, 0.3);
      border-radius: 12px;
      animation: float 6s ease-in-out infinite;
    }
    
    .shape2 {
      bottom: 20%;
      right: 15%;
      width: 60px;
      height: 60px;
      border: 3px solid rgba(255, 122, 61, 0.3);
      border-radius: 50%;
      animation: float 8s ease-in-out infinite;
    }
    
    .shape3 {
      top: 60%;
      left: 20%;
      width: 30px;
      height: 30px;
      background-color: rgba(255, 122, 61, 0.2);
      border-radius: 6px;
      transform: rotate(45deg);
      animation: float 7s ease-in-out infinite;
    }
    
    @keyframes float {
      0% {
        transform: translateY(0) rotate(0);
      }
      50% {
        transform: translateY(-20px) rotate(5deg);
      }
      100% {
        transform: translateY(0) rotate(0);
      }
    }
    
    /* Cursor Effect */
    .cursor {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: rgba(255, 122, 61, 0.5);
      position: fixed;
      pointer-events: none;
      z-index: 9999;
      mix-blend-mode: difference;
      transition: transform 0.1s ease;
    }
    
    .cursor-follower {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: rgba(255, 122, 61, 0.1);
      position: fixed;
      pointer-events: none;
      z-index: 9998;
      transition: transform 0.2s ease;
    }
    
    /* Scroll Indicator */
    .scroll-indicator {
      position: absolute;
      bottom: 40px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
      color: #666;
      font-size: 0.8rem;
      opacity: 0.7;
      animation: bounce 2s infinite;
    }
    
    .scroll-indicator svg {
      width: 20px;
      fill: #666;
    }
    
    @keyframes bounce {
      0%, 100% {
        transform: translateY(0) translateX(-50%);
      }
      50% {
        transform: translateY(10px) translateX(-50%);
      }
    }
    
    /* Responsive */
    @media (max-width: 992px) {
      .hero-content {
        flex-direction: column;
        text-align: center;
        gap: 40px;
      }
      
      .hero-text {
        max-width: 100%;
      }
      
      .stats {
        justify-content: center;
      }
      
      .cta-buttons {
        justify-content: center;
      }
      
      .quote {
        position: relative;
        max-width: 100%;
        margin-top: 30px;
      }
      
      .hero-title {
        font-size: 3rem;
      }
    }
    
    @media (max-width: 768px) {
      nav ul {
        display: none;
      }
      
      .hero-image img {
        width: 300px;
      }
      
      .image-circle {
        width: 350px;
        height: 350px;
      }
    }
  </style>
</head>
<body>
  <div class="cursor"></div>
  <div class="cursor-follower"></div>
  
  <header>
    <div class="container header-container">
      <a href="#" class="logo">
        <div class="logo-circle">PF</div>
        PortFolio
      </a>
      <nav>
        <ul class="nav-links">
          <li><a href="#" class="active">Home</a></li>
          <li><a href="#">About</a></li>
          <li><a href="#">Service</a></li>
          <li><a href="#">Project</a></li>
          <li><a href="#">Contact</a></li>
          <button class="btn2 btn-primary">Download CV</button>
        </ul>
      </nav>
    </div>
  </header>
  
  <section class="hero">
    <div class="scene-container" id="scene-container"></div>
    
    <div class="floating-shape shape1"></div>
    <div class="floating-shape shape2"></div>
    <div class="floating-shape shape3"></div>
    
    <div class="container hero-content">
      <div class="hero-text">
        <div class="hello-badge">Hello!</div>
        <h1 class="hero-title">I'm <span class="highlight">Rishi</span>, <br><span id="change">Web Developer</span></h1>
        <p class="hero-desc">Creating exceptional digital experiences with a focus on user-centered design principles and beautiful aesthetics.</p>
        
        <div class="cta-buttons">
          <button class="btn btn-primary">
            Portfolio
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
          <button class="btn btn-secondary">Hire me</button>
        </div>
        
        <div class="stats">
          <div class="stat-item">
            <!-- <div class="rating">â˜…â˜…â˜…â˜…â˜…</div> -->
            <span class="stat-number">10</span>
            <span class="stat-text">Years Experience</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">150+</span>
            <span class="stat-text">Projects Completed</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">98%</span>
            <span class="stat-text">Client Satisfaction</span>
          </div>
        </div>
      </div>
      
      <div class="hero-image">
        <div class="image-circle"></div>
        <img src="./images/rishi.jpg" alt="Rishi - Product Designer">
        
        <div class="quote">
          <p>"Jenny's exceptional product design ensures our website's success. Highly Recommended"</p>
          <div class="quote-author">â€” ClientName, CEO</div>
        </div>
      </div>
    </div>
    
    <div class="scroll-indicator">
      <span>Scroll Down</span>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path d="M12 5v14M5 12l7 7 7-7"/>
      </svg>
    </div>
  </section>
  
  <script>
      // for text
        const texts = [
        "Android Developer",
        "Java Programmer",
        "Web Developer"
        ];

        var index = 0;

        function changeText() {
        const h1 = document.getElementById('change');
        h1.textContent = texts[index];
        index = (index + 1) % texts.length;
        }

        setInterval(changeText, 2000);

    // Initialize Three.js scene
    const container = document.getElementById('scene-container');
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });
    
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);
    
    // Create 3D floating objects
    const geometry1 = new THREE.SphereGeometry(0.5, 32, 32);
    const geometry2 = new THREE.TorusGeometry(0.3, 0.1, 16, 100);
    const geometry3 = new THREE.TetrahedronGeometry(0.4);
    
    const material1 = new THREE.MeshBasicMaterial({ color: 0xFF7A3D, wireframe: true });
    const material2 = new THREE.MeshBasicMaterial({ color: 0xFF7A3D, wireframe: true });
    const material3 = new THREE.MeshBasicMaterial({ color: 0xFF7A3D, transparent: true, opacity: 0.5 });
    
    const sphere = new THREE.Mesh(geometry1, material1);
    const torus = new THREE.Mesh(geometry2, material2);
    const tetrahedron = new THREE.Mesh(geometry3, material3);
    
    sphere.position.set(-5, 2, -5);
    torus.position.set(5, -2, -7);
    tetrahedron.position.set(0, 3, -6);
    
    scene.add(sphere);
    scene.add(torus);
    scene.add(tetrahedron);
    
    camera.position.z = 5;
    
    // Animation function
    function animate() {
      requestAnimationFrame(animate);
      
      sphere.rotation.x += 0.003;
      sphere.rotation.y += 0.005;
      
      torus.rotation.x += 0.005;
      torus.rotation.z += 0.003;
      
      tetrahedron.rotation.x += 0.004;
      tetrahedron.rotation.y += 0.002;
      
      renderer.render(scene, camera);
    }
    
    animate();
    
    // Resize handler
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
    
    // Custom cursor
    const cursor = document.querySelector('.cursor');
    const cursorFollower = document.querySelector('.cursor-follower');
    
    document.addEventListener('mousemove', (e) => {
      cursor.style.left = e.clientX + 'px';
      cursor.style.top = e.clientY + 'px';
      
      cursorFollower.style.left = e.clientX + 'px';
      cursorFollower.style.top = e.clientY + 'px';
    });
    
    document.addEventListener('mousedown', () => {
      cursor.style.transform = 'scale(0.7)';
      cursorFollower.style.transform = 'scale(2)';
    });
    
    document.addEventListener('mouseup', () => {
      cursor.style.transform = 'scale(1)';
      cursorFollower.style.transform = 'scale(1)';
    });
    
    // GSAP animations
    gsap.registerPlugin(ScrollTrigger);
    
    gsap.to('.hello-badge', {
      opacity: 1,
      y: 0,
      duration: 0.8,
      delay: 0.2,
      ease: 'power3.out'
    });
    
    gsap.to('.hero-title', {
      opacity: 1,
      y: 0,
      duration: 0.8,
      delay: 0.4,
      ease: 'power3.out'
    });
    
    gsap.to('.hero-desc', {
      opacity: 1,
      y: 0,
      duration: 0.8,
      delay: 0.6,
      ease: 'power3.out'
    });
    
    gsap.to('.cta-buttons', {
      opacity: 1,
      y: 0,
      duration: 0.8,
      delay: 0.8,
      ease: 'power3.out'
    });
    
    gsap.to('.stats', {
      opacity: 1,
      y: 0,
      duration: 0.8,
      delay: 1,
      ease: 'power3.out'
    });
    
    gsap.to('.hero-image', {
      opacity: 1,
      duration: 1,
      delay: 0.6,
      ease: 'power3.out'
    });
    
    gsap.to('.quote', {
      opacity: 1,
      x: 0,
      duration: 0.8,
      delay: 1.2,
      ease: 'power3.out'
    });
    
    // Parallax effect on mouse move
    document.addEventListener('mousemove', (e) => {
      const mouseX = e.clientX / window.innerWidth - 0.5;
      const mouseY = e.clientY / window.innerHeight - 0.5;
      
      sphere.position.x = -5 + mouseX * 2;
      sphere.position.y = 2 - mouseY * 2;
      
      torus.position.x = 5 - mouseX * 3;
      torus.position.y = -2 + mouseY * 3;
      
      tetrahedron.position.x = mouseX * 4;
      tetrahedron.position.y = 3 - mouseY * 4;
      
      gsap.to('.floating-shape.shape1', {
        x: mouseX * 40,
        y: mouseY * 40,
        duration: 1
      });
      
      gsap.to('.floating-shape.shape2', {
        x: -mouseX * 20,
        y: -mouseY * 20,
        duration: 1.5
      });
      
      gsap.to('.floating-shape.shape3', {
        x: mouseX * 30,
        y: -mouseY * 30,
        duration: 1.2
      });
      
      gsap.to('.image-circle', {
        x: mouseX * 20,
        y: mouseY * 20,
        duration: 1,
        ease: 'power1.out'
      });
    });
    
    // Text animation on hover
    const heroTitle = document.querySelector('.hero-title .highlight');
    
    heroTitle.addEventListener('mouseenter', () => {
      gsap.to(heroTitle, {
        scale: 1.05,
        color: '#e86a2d',
        duration: 0.3
      });
    });
    
    heroTitle.addEventListener('mouseleave', () => {
      gsap.to(heroTitle, {
        scale: 1,
        color: '#FF7A3D',
        duration: 0.3
      });
    });
    
    // Button animations
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
      button.addEventListener('mouseenter', () => {
        gsap.to(cursor, {
          scale: 1.5,
          duration: 0.3
        });
      });
      
      button.addEventListener('mouseleave', () => {
        gsap.to(cursor, {
          scale: 1,
          duration: 0.3
        });
      });
    });
  </script>
</body>
</html>
